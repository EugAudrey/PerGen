/************************************************
 * This file was generated by ....
 ************************************************/

package org.jberger.pergen.prototype;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;


/**
 * DAO class to map a Book object to the BOOK table of the
 * database.
 */
public class BookDAO {

    /**
     * Connection to the database.
     */
    private Connection connection = null;


    /**
     * To instanciate the Book DAO.
     * @param dbConnection The connection to the database. Must be
     *                     opened and valid.
     */
    public BookDAO(final Connection dbConnection) {
        connection = dbConnection;
    }


    /**
     * Retrieve a Book by Id.
     * @param id Id of the Book to retrieve.
     * @return The Book retrieved.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     */
    public final Book getBook(final Integer id) throws DAOException {
        try {
            PreparedStatement query = connection.prepareStatement(
                                    "select * from BOOK where BOOK_ID=?");
            query.setInt(1, id.intValue());

            ResultSet result = query.executeQuery();
            result.beforeFirst();
            if (result.next()) {
                Book book = new Book();

                book.setId(result.getInt("BOOK_ID"));
                book.setTitle(result.getString("title"));
                book.setPrice(result.getDouble("price"));
                book.setYear(result.getInt("year"));
                book.setSectionId(result.getInt("SECTION_ID"));

                PreparedStatement authors = connection.prepareStatement(
                           "select AUTHOR_ID from AUTHOR_BOOK where BOOK_ID=?");
                authors.setInt(1, book.getId().intValue());

                ResultSet authorsResult = authors.executeQuery();
                authorsResult.beforeFirst();
                while (authorsResult.next()) {
                    book.addAuthor(authorsResult.getInt("AUTHOR_ID"));
                }

                return book;
            }
        } catch (SQLException e) {
            throw new DAOException("Unable to perform query on database.", e);
        }
        return null;
    }

    /**
     * Retrieve all Book.
     * @return A list of all Books.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     */
    public final ArrayList<Book> getAllBooks() throws DAOException {
        try {
            PreparedStatement query = connection.prepareStatement(
                                                       "select * from BOOK");

            ResultSet result = query.executeQuery();
            result.beforeFirst();
            ArrayList<Book> list = new ArrayList<Book>();

            while (result.next()) {
                Book book = new Book();

                book.setId(result.getInt("BOOK_ID"));
                book.setTitle(result.getString("title"));
                book.setPrice(result.getDouble("price"));
                book.setYear(result.getInt("year"));
                book.setSectionId(result.getInt("SECTION_ID"));

                PreparedStatement authors = connection.prepareStatement(
                           "select AUTHOR_ID from AUTHOR_BOOK where BOOK_ID=?");
                authors.setInt(1, book.getId().intValue());

                ResultSet authorsResult = authors.executeQuery();
                authorsResult.beforeFirst();
                while (authorsResult.next()) {
                    book.addAuthor(authorsResult.getInt("AUTHOR_ID"));
                }

                list.add(book);
            }

            return list;
        } catch (SQLException e) {
            throw new DAOException("Unable to perform query on database.", e);
        }
    }

    /**
     * Delete a Book by Id.
     * @param id The Id of the Book to delete.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     */
    public final void delete(final Integer id) throws DAOException {
        try {
            PreparedStatement authors = connection.prepareStatement(
                                  "delete from AUTHOR_BOOK where BOOK_ID=?");
            authors.setInt(1, id);
            authors.executeUpdate();

            PreparedStatement query = connection.prepareStatement(
                                      "delete from BOOK where BOOK_ID=?");
            query.setInt(1, id);
            query.executeUpdate();
        } catch (SQLException e) {
            throw new DAOException("Unable to perform delete on database.", e);
        }
    }


    /**
     * Save a Book to database. If the Id of the object is null, a new
     * row is created. If the Id of the object is specified, an update is done
     * on this record.
     * @param book The Book object to save.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     * @throws NullityException Raised if a required field is null in the
     *                          object.
     */
    public final void save(final Book book) throws DAOException,
                                                   NullityException {
        checkNullity(book);

        if (book.getId() == null) {
            book.setId(getNewId());

            try {
                PreparedStatement query = connection.prepareStatement(
                    "insert into BOOK(BOOK_ID, title, price, year, SECTION_ID) "
                    + "values(?, ?, ?, ?, ?)");
                query.setInt(1, book.getId().intValue());
                query.setString(2, book.getTitle());
                query.setDouble(3, book.getPrice());
                query.setInt(4, book.getYear());
                query.setInt(5, book.getSectionId());

                query.executeUpdate();
            } catch (SQLException e) {
                throw new DAOException("Unable to perform insert on database.",
                                       e);
            }
        } else {
            try {
                PreparedStatement query = connection.prepareStatement(
                                "update BOOK set title=?, price=?, year=?, "
                              + "SECTION_ID=? where BOOK_ID=?");
                query.setString(1, book.getTitle());
                query.setDouble(2, book.getPrice());
                query.setInt(3, book.getYear());
                query.setInt(4, book.getSectionId());
                query.setInt(5, book.getId().intValue());

                query.executeUpdate();

                PreparedStatement deleteAuthors = connection.prepareStatement(
                                     "delete from AUTHOR_BOOK where BOOK_ID=?");
                deleteAuthors.setInt(1, book.getId());
                deleteAuthors.executeUpdate();
            } catch (SQLException e) {
                throw new DAOException("Unable to perform update on database.",
                                       e);
            }
        }

        try {
            for (Integer authorId : book.getAuthorList()) {
                PreparedStatement link = connection.prepareStatement(
                        "insert into AUTHOR_BOOK(AUTHOR_ID, BOOK_ID) "
                        + "values(?, ?)");
                link.setInt(1, authorId);
                link.setInt(2, book.getId());
                link.executeUpdate();
            }
        } catch (SQLException e) {
            throw new DAOException("Unable to perform insert on database.",
                    e);
        }
    }


    /**
     * Fetch a new Id for an object based on the max Id in the table.
     * @return The new Id.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     */
    protected final Integer getNewId() throws DAOException {
        try {
            PreparedStatement query = connection.prepareStatement(
                                "select max(BOOK_ID) as NEWID from BOOK");
            ResultSet result = query.executeQuery();

            if (result.next()) {
                 return new Integer(result.getInt("NEWID") + 1);
            } else {
                 return new Integer(0);
            }
         } catch (SQLException e) {
             throw new DAOException("Unable to perform query on database.", e);
         }
    }


    /**
     * Verify if any required field is null in the object.
     * @param book The instance to verify.
     * @throws NullityException Raised if a required field is null in the
     *                          object.
     */
    protected final void checkNullity(final Book book)
                                                       throws NullityException {
        if (book.getTitle() == null) {
            throw new NullityException("Book", "title");
        }
        if (book.getPrice() == null) {
            throw new NullityException("Book", "price");
        }
        if (book.getYear() == null) {
            throw new NullityException("Book", "year");
        }
        if (book.getSectionId() == null) {
            throw new NullityException("Book", "SectionId");
        }
    }
}
