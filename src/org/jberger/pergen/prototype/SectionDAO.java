/************************************************
 * This file was generated by ....
 ************************************************/

package org.jberger.pergen.prototype;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;


/**
 * DAO class to map a Section object to the SECTION table of the
 * database.
 */
public class SectionDAO {

    /**
     * Connection to the database.
     */
    private Connection connection = null;


    /**
     * To instanciate the Section DAO.
     * @param dbConnection The connection to the database. Must be
     *                     opened and valid.
     */
    public SectionDAO(final Connection dbConnection) {
        connection = dbConnection;
    }


    /**
     * Retrieve a Section by Id.
     * @param id Id of the Section to retrieve.
     * @return The Section retrieved.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     */
    public final Section getSection(final Integer id) throws DAOException {
        try {
            PreparedStatement query = connection.prepareStatement(
                                    "select * from SECTION where SECTION_ID=?");
            query.setInt(1, id.intValue());

            ResultSet result = query.executeQuery();
            result.beforeFirst();
            if (result.next()) {
                Section section = new Section();

                section.setId(result.getInt("SECTION_ID"));
                section.setName(result.getString("name"));

                return section;
            }
        } catch (SQLException e) {
            throw new DAOException("Unable to perform query on database.", e);
        }
        return null;
    }

    /**
     * Retrieve all Sections.
     * @return A list of all Sections.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     */
    public final ArrayList<Section> getAllSections() throws DAOException {
        try {
            PreparedStatement query = connection.prepareStatement(
                                                       "select * from SECTION");

            ResultSet result = query.executeQuery();
            result.beforeFirst();
            ArrayList<Section> list = new ArrayList<Section>();

            while (result.next()) {
                Section section = new Section();

                section.setId(result.getInt("SECTION_ID"));
                section.setName(result.getString("name"));

                list.add(section);
            }

            return list;
        } catch (SQLException e) {
            throw new DAOException("Unable to perform query on database.", e);
        }
    }

    /**
     * Delete a Section by Id.
     * @param id The Id of the Section to delete.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     */
    public final void delete(final Integer id) throws DAOException {
        try {
            PreparedStatement query = connection.prepareStatement(
                                      "delete from SECTION where SECTION_ID=?");
            query.setInt(1, id);

            query.executeUpdate();
        } catch (SQLException e) {
            throw new DAOException("Unable to perform delete on database.", e);
        }
    }


    /**
     * Save a Section to database. If the Id of the object is null, a new
     * row is created. If the Id of the object is specified, an update is done
     * on this record.
     * @param section The Section object to save.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     * @throws NullityException Raised if a required field is null in the
     *                          object.
     */
    public final void save(final Section section) throws DAOException,
                                                         NullityException {
        checkNullity(section);

        if (section.getId() == null) {
            section.setId(getNewId());

            try {
                PreparedStatement query = connection.prepareStatement(
                          "insert into SECTION(SECTION_ID, name) values(?, ?)");
                query.setInt(1, section.getId().intValue());
                query.setString(2, section.getName());

                query.executeUpdate();
            } catch (SQLException e) {
                throw new DAOException("Unable to perform insert on database.",
                                       e);
            }
        } else {
            try {
                PreparedStatement query = connection.prepareStatement(
                                "update SECTION set name=? where SECTION_ID=?");
                query.setString(1, section.getName());
                query.setInt(2, section.getId().intValue());

                query.executeUpdate();
            } catch (SQLException e) {
                throw new DAOException("Unable to perform update on database.",
                                       e);
            }
        }
    }


    /**
     * Fetch a new Id for an object based on the max Id in the table.
     * @return The new Id.
     * @throws DAOException Exception that occured during the execution of the
     *                      query.
     */
    protected final Integer getNewId() throws DAOException {
        try {
            PreparedStatement query = connection.prepareStatement(
                                "select max(SECTION_ID) as NEWID from SECTION");
            ResultSet result = query.executeQuery();

            if (result.next()) {
                 return new Integer(result.getInt("NEWID") + 1);
            } else {
                 return new Integer(0);
            }
         } catch (SQLException e) {
             throw new DAOException("Unable to perform query on database.", e);
         }
    }


    /**
     * Verify if any required field is null in the object.
     * @param section The instance to verify.
     * @throws NullityException Raised if a required field is null in the
     *                          object.
     */
    protected final void checkNullity(final Section section)
                                                       throws NullityException {
        if (section.getName() == null) {
            throw new NullityException("Section", "name");
        }
    }
}
